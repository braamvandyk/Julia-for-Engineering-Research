{
  "hash": "6a9cc697979eeba7b93ae2879e69c0ac",
  "result": {
    "markdown": "---\ntitle: Getting Started with Julia\nauthor: Braam van Dyk\ndate: 2023/03/10\nformat:\n  html:\n    code-fold: true\n---\n\n# Why Julia?\nThere are a vast number of articles on the internet on the topic of why you would want to use Julia. I'll briefly explain why I prefer programming in Julia and think you may too.\n\nEveryone who either programs seriously, or merely dabbles in code likely has a personal favourite programming language. It may be that they only know one language. Professional programmers often have more than one language they work in, and often prefer a certain tool for specific tasks. It is a simple fact that some languages are better for certain tasks than others for various reasons. \n\nJulia was conceived with technical programming in mind. It has its origins in academia, being developed at MIT, and is still mostly used by researchers, in natural and engineering sciences, computer science, mathematics, machine learning and many other fields. Commercial software written in Julia is available, e.g. [Pumas](https://pumas.ai/) for pharmaceutical drug discovery, or [TIM](https://www.tangent.works/) for automatically building predictive models from time-series data. The bulk of work done in Julia, however, is in research and development, in academia, but also at approximately 10,000 companies and institutions world-wide, including AstraZeneca, BlackRock, Google, Intel, Microsoft, Moderna, Pfizer, NASA, the Federal Aviation Adminstration and the Federal Reserve Bank of New York to name a few. Julia is taught in over 1,500 universities, including MIT, Stanford and UC Berkley.\n\nJulia was designed to solve the so-called *two language problem*. This is where a researcher develops algorithms in a dynamic language, such as Python or R, where it is easy to interact with the code and change things around with little effort. At some point however, they find the need to speed up the code as it becomes more complex. This often results in a rewrite of the program in a fast language, such as C or Fortran. Julia is a dynamic language, but generates code as fast as anything you can do in C, without the arcane syntax and multiple built-in ways to shoot yourself in the foot. This doesn't imply that your Julia code is always fast. It is possible to write slow code in any language. It is just a whole lot easier to write fast code in Julia. When you run into speed problems in Python or R, the only solution is to call libraries written in C, with Python or R wrappers. In Julia, your fast code is usually 100% Julia code - you don't need to know a second, fast language. In addition, Julia plays well with C, Python and R and you can call code written in any of these directly from Julia and vice versa.\n\nJulia is open-source and free. There are thousands of packages available in Julia - also open-sourced and free. Since Julia was developed for technical programming, most of these packages similarly are for solving technical problems. There are however also many others, from web development to animation and just about anything in between. Linear algebra is baked right into the language, including working with sparse matrices, so is parallel programming - multithreading and multiprocessing. There are very powerful differential equation solvers, non-linear equation solvers, optimisers, machine learning libraries, and even thermodynamic property libraries readily and freely available.\n\nJulia's syntax is borrows the best parts from Matlab, Python and Lisp. A lot of effort has gone into making it easier to learn the syntax. That said, there is always some learning curve when venturing into a new programming language. Like you can only learn to ride a bicycle by climbing on one and starting to pedal, the only way to learn programming and programming languages is to write code.\n\n## Why Julia code is fast\nThe defining paradigm in Julia is *multiple dispatch*. Unless you are a computer scientist, that probably doesn't mean much to you. I'll try to explain simply with some examples.\n\nHere is a little Julia code. Don't worry if you don't know the syntax yet. We are just defining a function thats takes two inputs `a` and `b` and returns `2b + a`. Note that we don't need a multiplication sign between the `2` and `b` in Julia - the language attempts to follow standard mathematical syntax where possible. You can also use any Unicode symbols, like Greek letters, subscripts and superscripts for variable names. Just don't get carried away with those.\n\n\n```julia\nfunction myfunc(a, b)\n    return 2b + a\nend\n```\n\nWe enter the code at the Julia REPL (we'll get to this soon) and call it:\n\n```julia\njulia> function myfunc(a, b)\n           return 2b + a\n       end\nmyfunc (generic function with 1 method)\n\njulia> myfunc(1, 2)\n5\n\njulia> myfunc(1.0, 2.0)\n5.0\n```\nThe first thing to notice is that unlike in languages like C, Basic, Pascal or Fortran, we never specified the types of the variable, i.e. whether they are integers or floating point values (numbers with fractional parts). There are times when you want to do this, but generally you would not. However, when we called the function with two integers, the answer was returned as an integer. When we called the code with two floating point values, the answer was returned as a floating point value.\n\nWhat happened behind the scenes? Julia infers the types of all of the inputs and generates the optimal code for that collection of input types. We can see this in action by asking Julia to show us the code it generated^[Julia generates LLVM code and then uses LLVM to generate code optimised for your specific CPU. LLVM is somewhat similar to an assembler, for those familiar with the term.]:\n\n\n```julia\njulia> @code_llvm myfunc(1, 2)\n;  @ REPL[1]:1 within `myfunc`\n; Function Attrs: uwtable\ndefine i64 @julia_myfunc_172(i64 signext %0, i64 signext %1) #0 {\ntop:\n;  @ REPL[1]:2 within `myfunc`\n; ┌ @ int.jl:88 within `*`\n   %2 = shl i64 %1, 1\n; └\n; ┌ @ int.jl:87 within `+`\n   %3 = add i64 %2, %0\n; └\n  ret i64 %3\n}\n```\n\nMost of what you see here is going to look like hieroglyphics, but don't worry. You can ignore any line that starts with a semi-colon. These are automatically generated comments. The first line of actual code is:\n\n```\ndefine i64 @julia_myfunc_172(i64 signext %0, i64 signext %1) #0 {\n```\n\nThis defines a function (with a unique name - you'll understand later why this is done) that returns a type `i64`, a 64-bit integer, and accepts two inputs, `%0` amd `%1`, both of type `i64`.\n\nThe next line is:\n```\n%2 = shl i64 %1, 1\n```\n\nThis shifts the value in `%1` left by one bit and stores the result in a new variable, `%2`. If you know binary numbers^[There are 10 types of people in the world. Those who understand binary and those who don't.], you will know that this means the value is multiplied by two, just like shifting a decimal number left by one position multiplies the value by ten.\n\nThe next line is:\n```\n%3 = add i64 %2, %0\n```\n\nThis creates a new variable, `%3` and writes into this variable the result of adding `%2` and `%0`.\n\nFinally, we have\n```\nret i64 %3\n```\n\nThis returns the value in `%3`, as an `i64`, a 64-bit integer.\n\nWithout breaking your head about the details, you should appreciate that this is code that is optimised for the case where we passed two integers, including using a `shl` (shift left) operation, rather than the machine multiplication instruction, as the former is faster.\n\nNow let's see what we get when we pass to 64-bit floating-point values.\n\n```julia\njulia> @code_llvm myfunc(1.0, 2.0)\n;  @ REPL[1]:1 within `myfunc`\n; Function Attrs: uwtable\ndefine double @julia_myfunc_191(double %0, double %1) #0 {\ntop:\n;  @ REPL[1]:2 within `myfunc`\n; ┌ @ promotion.jl:389 within `*` @ float.jl:385\n   %2 = fmul double %1, 2.000000e+00\n; └\n; ┌ @ float.jl:383 within `+`\n   %3 = fadd double %2, %0\n; └\n  ret double %3\n}\n```\n\nThe function definition looks similar to the previous case, expect that we now have variables of type `double`, rather than `i64`.\n\nThe next line:\n```\n%2 = fmul double %1, 2.000000e+00\n```\n\nSince we can't simply shift a floating point value left by one bit to multiply it by two, the `fmul` instruction, floating point multiplication, is used to multiply the value in `%1` by 2.0. Then, in the next line, the `fadd` (floating point addition) instruction adds the result from the multiplcation to `%0`:\n\n```\n%3 = fadd double %2, %0\n```\n\n::: {.callout-note}\nThe important thing to learn from this is that **Julia built optimised versions of the function for each case**. Similarly, is we pass an integer and a floating point value, or vice versa, or any two other appropriate types of values, new versions of the functon will be constructed and each will be optimised for that combination of types passed.\n:::\n\nIt goes evern further.\n\n```julia\njulia> A = [1 2;\n            3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> B = [5 6;\n            7 8]\n2×2 Matrix{Int64}:\n 5  6\n 7  8\n\njulia> myfunc(A, B)\n2×2 Matrix{Int64}:\n 11  14\n 17  20\n```\n\nHere we defined to 2x2 matrices of 64-bit integers and passed those to our function. And it just works! More so, the code was again optimised for handling these types of variables.\n\nThis is how Julia generates fast code. The original function we defined without specifying variable types is called a generic function. Julia then builds specialised version of the function based on the types of the variables we passed. Whenever we call the function, Julia checks if it has already compiled an appropriate version and then calls that version. If not, it compiles a new, specialised version to use.\n\nThis allows you to generate the fastest possible code, but for large pieces of code, this also results in a delay while the code is compiled. This is called TTFX (Time to First X) or often just Time to First Plot, as this is especially noticable when calling the various plotting libraries in Julia. The first time to call a plotting function, there is a considerable delay. Every time after that, the plotting is lightning fast.\n\n```julia\njulia> @time using Plots\n  6.401451 seconds (8.83 M allocations: 612.705 MiB, 2.67% gc time, 11.00% compilation time: 3% of which was recompilation)\n\njulia> @time scatter(randn(10), randn(10))\n  1.152227 seconds (93.64 k allocations: 4.612 MiB, 99.65% compilation time)\n\njulia> @time scatter(randn(10), randn(10))\n  0.000392 seconds (414 allocations: 43.344 KiB)\n```\nIt takes 6.4 seconds to import the Plots package. The first time we call `scatter` to generate a scatter plot, the code is compiled, which takes 1.15 seconds. The next time however, the compiled code is already available and it takes 0.4 milliseconds to generate the plot. Every subsequent call to `scatter` with the same types of values passed to it, will also be fast.\n\nIn every new version of the Julia compiler, some work is included to reduce he latency of TTFX. The next version of Julia at the time of writing, v1.9, will include several new features to significantly reduce the problem. This is not magic though, merely a toolset that allows package authors to increase the amount of code that is precompiled when the package is first installed. This will only help of the tools are used. Since the Julia community is generally very enshusiastic about speed, it is reasonable to expect most, if not all of them will indeed do so.\n\n## Julia for people in a hurry\n\nSome of the people reading this document will be experienced programmers and some will be masters of numerical methods. Most of you won't be either, but still want to solve a technical problem. Here Julia is your friend.\n\nAny commonly-used numerical methods you are likely to want to use is already available in a package, generally written by people with PhDs in the relevant field and optimised to the nth degree by researchers who needed this before you did and contributed to the openly available source code. Sometimes, the methods are already built into Julia, as is the case for linear algebra.\n\nLet's say you want to factorise a matrix. You *could* pull your linear algebra text book and your numerical methods notes off the shelf and remind yourself which factorisation methods are best-suited to your type of matrix and how that methods works, then code your own copy. Or you could just let Julia take care of it for you:\n\n```julia\njulia> A = rand(5, 5) #create a random matrix\n5×5 Matrix{Float64}:\n 0.80492   0.282962  0.470656  0.947669   0.185726\n 0.201024  0.65166   0.827719  0.759129   0.597441\n 0.391872  0.829147  0.437748  0.0278852  0.0868745\n 0.583262  0.934832  0.187209  0.771838   0.373839\n 0.424062  0.973599  0.7794    0.917351   0.0827884\n\njulia> B = A*A' #create a symmetric matrix by multiplying A with its transpose\n5×5 Matrix{Float64}:\n 1.88205   1.56614  0.798632  1.62299  1.86838\n 1.56614   2.0834   1.0545    1.69067  2.11067\n 0.798632  1.0545   1.041     1.13963  1.34739\n 1.62299   1.69067  1.13963   1.98464  2.0424\n 1.86838   2.11067  1.34739   2.0424   2.58357\n\njulia> factorize(A)\nLU{Float64, Matrix{Float64}, Vector{Int64}}\nL factor:\n5×5 Matrix{Float64}:\n 1.0       0.0        0.0        0.0       0.0\n 0.526837  1.0        0.0        0.0       0.0\n 0.724621  0.885107   1.0        0.0       0.0\n 0.486846  0.83853    0.379704   1.0       0.0\n 0.249744  0.70464   -0.537792  -0.110424  1.0\nU factor:\n5×5 Matrix{Float64}:\n 0.80492  0.282962   0.470656   0.947669   0.185726\n 0.0      0.824524   0.531441   0.418083  -0.0150591\n 0.0      0.0       -0.62422   -0.284911   0.252587\n 0.0      0.0        0.0       -0.675877  -0.0868263\n 0.0      0.0        0.0        0.0        0.68792\n\njulia> factorize(B)\nCholesky{Float64, Matrix{Float64}}\nU factor:\n5×5 UpperTriangular{Float64, Matrix{Float64}}:\n 1.37188  1.1416    0.582145  1.18304   1.36191\n  ⋅       0.883262  0.441459  0.385059  0.62939\n  ⋅        ⋅        0.712192  0.394468  0.38853\n  ⋅        ⋅         ⋅        0.53026   0.0671023\n  ⋅        ⋅         ⋅         ⋅        0.420928\n```\nFor the sake of examples, we create a random 5x5 matrix, `A` and then multiply it by its transpose to create a symmetrix matrix, B. We then ask Julia to factorise both, by calling the `factorize()`  function (note the American spelling!).\n\nFor the square, random matrix, LU decomposition is the most appropriate method and that is what we get. For the symmetrix matrix, Cholesky's methods is the most efficient and hence that is what Julia uses. It will also use other specialised methods for other specific matrix types. See the [manual](https://docs.julialang.org/en/v1/stdlib/LinearAlgebra/#LinearAlgebra.factorize) for details. When you use the factorised matrix in computations, further specialised, optimised methods will be used, depending on the factorisation that was used. You can of course just call specific factorisation methods, such as `lu()` or `qr()` as well.\n\nAlso note that the Cholesky factorisation returns a specialised type of matrix, `UpperTriangular{Float64, Matrix{Float64}}`, which also has specialised calculations methods that take advantage of knowledge of the structure of the matrix.\n\nIn a similar fashion, when solving differential equations, the `DifferentialEquations.jl` package can automatically select algorithms. You can help it along by supplying a hint that the problem is stiff, or you can specify which methods you want to use. For stiff problems, implicit methods are available and the package will use automatic differentiation to generate the higher level derivaties needed for these with low overheads.\n\nThese things don't happen through magic, although it may look like it. The code, either in the Julia standard library or an a user-supplied package, was simply written by experts in the field. This means you can get away with knowing a little less about the intracacies of the mathematics than you would be able to if you had to write everything yourself. This by no means implies you shouldn't learn more about the mathematics and numerical methods! More knowledge will always give better results.\n\n## Powerful plotting and data processing\n\nJulia has several powerful plotting libraries available for data visualisation. You can use `Plots.jl` as a unified front-end for several plotting engines, like `GR`, `Plotly` or `PyPlot`. You may prefer to use `Makie` - a Julia-specific plotting library with that gives you extreme control over every aspect of the plot, including interactivity. You may prefer to add statistical analyses to the plot via `GadFly.jl` or `AlgebraOfGraphics.jl`.\n\n![A [Makie](https://beautiful.makie.org/dev/examples/generated/2d/streamplot/complex_polya_field/) generated plot.](img/makie.png){fig-align=\"center\"}\n\n![An [AlgebraOfGraphics](https://beautiful.makie.org/dev/examples/generated/2d/aog/penguins3d/) generated plot.](img/aog.png){fig-align=\"center\"}\n\nJulia has one of the fastest tools for reading data files, in `CSV.jl`, or you can prefer to manipulate your Excel files directly from Julia with `XLSX.jl`. Tabular data can be easily handled with `DataFrames.jl` and you can even execute SQL-like queries on the data via `Query.jl`. If you need to add units to your numbers, then `Unitful.jl` is for you.\n\n## And much, much more\nThere are likely Julia packages for any task you wish to attempt. And if there isn't a Julia-specific package, there is probably a wrapper for a Python or C library.\n\nBecause of Julia's generic code, code re-use is Julia is more more common than in any other language, as was illustrated when we passed matrices to your little example function before. It is often possible to combine packages that have little if anything to do with each other to solve a problem.\n\nWriting generic code is encouraged in the Julia ecosystem specifically to enable this. Rather than needing some all-encompasing package to solve your problem, you simply combine a few smaller, simpler and more easily optimised packaged to get the result you need.\n\n## When NOT to use Julia\nThere are of course instances where Julia is not the optimal choice.\n\nIf you want to compile a model to a binary file, Julia is likely not the best tool. While it is perfectly possible to compile Julia code to, e.g. a *DLL* file, the dynamic nature of Julia means that the entire Julia run-time is included in the file. This means a VERY large file is produced. This is an area of active development, and it is possible in some cases to compile small files, but at this time, there are better tools.\n\nIf you want to distribute your code to other people, but do not want to give them access to the source code, Julia may not be your first choice. It is again possible, and one way of doing this is by running your code on a server and giving the users access via a web page or Excel front-end, but it is not as simple as just compiling a *DLL* or *EXE* file in C or Visual Basic.\n\nIf you need to create a user interface with minimal effort, Excel is probably a better choice, especially if you intend to distribute the code. It is however possible (and not too difficult) to use Excel as a front-end for Julia code too.\n\n",
    "supporting": [
      "Getting_started_with_Julia_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}