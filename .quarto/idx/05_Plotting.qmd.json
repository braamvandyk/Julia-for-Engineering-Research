{"title":"Plotting","markdown":{"yaml":{"title":"Plotting"},"headingText":"Available Plotting Packages","containsRefs":false,"markdown":"\n\n\nThere are several plotting packages available in Julia. We shall focus only on one here - probably the most widely used plotting package in Julia - `Plots.jl`:\n\nOther popular plotting packages include [Makie](https://docs.makie.org/stable/) (with the [AlgebraOfGraphs](https://aog.makie.org/stable/) add-on for statistical analysis plotting) and [Gadfly](http://gadflyjl.org/stable/) - similar to R's ggplot, which are left for discovery by the reader.\n\n`Plots.jl` is a generic front-end for several plotting back-ends. These can also be used directly, but Plots allows a single front-end and you can switch the back-end with a single line of code without having to modify the actual calls to plotting functions. `Plots.jl` also has a powerful recipe system, which is widely supported. Package authors can define recipes for plots of the data types defined in their packages, which will then automatically generate sensible plots with the normal `plot()` function.\n\n### Back-ends Supported\n\nThe following back-ends are supported:\n\n1.  GR (default). Supports all features. Best choice for speed. Not currently interactive, but this feature is in development.\n2.  Plotly / PlotlyJS. Best choice for interactivity. The plot is generated in a browser. Plotly requires an internet connection, while PlotlyJS runs locally.\n3.  PythonPlot. Julia front-end for PyPlot, the Python front-end for Matplotlib. When installing, this will also install a private Python installation (it will use the same installation as Jupyter).\n4.  UnicodePlots. Plots generated with Unicode (text) characters right in the REPL.\n5.  Gaston. A Julia front-end for the GnuPlot back-end.\n6.  InspectDR\n7.  PGFPlotsX. Plotting engine based on TikZ - popular for $LaTeX$ documents\n\n### Installation\n\nThe `Plots.jl` package installed as a normal package via the package manager. This will also automatically install the `GR.jl` package as a dependency. In order to use the other back-ends, they must first be installed individually and then they must be activated, e.g.:\n\n``` julia\nusing Plots # Will use default back-end: GR\n\nplotlyjs() # Switch to PlotlyJS - previously installed\n# Plots.PlotlyJSBackend()\n\ngr() # Switch back to GR back-end\n# Plots.GRBackend()\n```\n\n### General use\n\nFor detailed documentation on all the features of Plots.jl, see the [manual](https://docs.juliaplots.org/stable/).\n\nA simple plot is generated with the `plot()` function. An existing plot can be added to with the `plot!()` function. If no plot variable is specified, this will add to the last generated plot. There are also mutating functions to add/modify the axis labels, plot title etc:\n\n-   title!()\n-   xlabel!()\n-   ylabel!()\n-   etc.\n\nYou can combine multiple plots in one. By default, the layout is a simple grid, but there is the option to specify complex layouts.\n\nYou can save the plot to file. Both `*.png` and `*.svg` formats are available and selected simply by specifying the extension in the filename.\n\nTwo examples:\n\n``` julia\nusing Plots\n\ndata1 = rand(5)\nx = randn(10)\ny = randn(10)\n\nplot(\n    plot(\n        data1,\n        label = \"some data\",\n        title=\"Line plot\",\n        xlabel=\"sample\",\n        ylabel=\"value\",\n        linecolor = :red,\n        linewidth = 3\n    ),\n    scatter(\n        x, y, \n        title = \"Scatter plot\",\n        label = \"samples\",\n        xlabel=\"x\",\n        ylabel=\"y\",\n        markercolor = :blue,\n        markershape = :diamond\n        )\n)\n\nsavefig(\"plotsexample.svg\")\n```\n\n![A plot generated with Plots.jl](./img/plotsexample1.svg)\n\n``` julia\ndata2 = rand(7)\ndata3 = rand(6)\nplot(data2, label=\"Experiment 2\", linestyle=:dashdotdot)\nplot!(data3, label= \"Experiment 3\", linewidth = 2)\ntitle!(\"Two series in a plot\")\nxlabel!(\"Sample number\")\nylabel!(\"Sample size\")\n\nsavefig(\"plotsexample2.svg\")\n```\n\n![Another plot generated with Plots.jl](./img/plotsexample2.svg)\n\n### More Advanced Examples\n\nYou can also generate contour and surface plots:\n\n``` julia\nf(x, y) = x*sin(x) - y^2 * cos(y)\nx = range(0, 5, length=100)\ny = range(0, 3, length=50)\nz = @. f(x', y)\ncontour(z)\nsavefig(\"img/plotscontour.svg\")\nsurface(x, y, z)\nsavefig(\"img/plotssurface.svg\")\n```\n\n![Plots.jl contour plot](./img/plotscontour.svg)\n\n![Plots.jl surface plot](./img/plotssurface.svg)\n\nThe `Plots.jl` package has a LOT more features than is shown here. This includes histograms, heatmaps and many more. See the [Plots.jl](https://docs.juliaplots.org/stable/) manual for details.\n\n:::{.callout-note}\nThose paying attention may have seen the `@.` in the previous example. This means every operator and function call in the line is broadcast automatically. I prefer explicitly broadcasting for clarity, but this is commonly used.\n:::\n\n### Statistics Plots\n\nThe `StatsPlots.jl` package is an extension of `Plots.jl` that adds typical statistics plots, like box plots, violin plots, kernel density plots etc. Refer to its [manual](https://docs.juliaplots.org/latest/generated/statsplots/) for more information.","srcMarkdownNoYaml":"\n\n## Available Plotting Packages\n\nThere are several plotting packages available in Julia. We shall focus only on one here - probably the most widely used plotting package in Julia - `Plots.jl`:\n\nOther popular plotting packages include [Makie](https://docs.makie.org/stable/) (with the [AlgebraOfGraphs](https://aog.makie.org/stable/) add-on for statistical analysis plotting) and [Gadfly](http://gadflyjl.org/stable/) - similar to R's ggplot, which are left for discovery by the reader.\n\n`Plots.jl` is a generic front-end for several plotting back-ends. These can also be used directly, but Plots allows a single front-end and you can switch the back-end with a single line of code without having to modify the actual calls to plotting functions. `Plots.jl` also has a powerful recipe system, which is widely supported. Package authors can define recipes for plots of the data types defined in their packages, which will then automatically generate sensible plots with the normal `plot()` function.\n\n### Back-ends Supported\n\nThe following back-ends are supported:\n\n1.  GR (default). Supports all features. Best choice for speed. Not currently interactive, but this feature is in development.\n2.  Plotly / PlotlyJS. Best choice for interactivity. The plot is generated in a browser. Plotly requires an internet connection, while PlotlyJS runs locally.\n3.  PythonPlot. Julia front-end for PyPlot, the Python front-end for Matplotlib. When installing, this will also install a private Python installation (it will use the same installation as Jupyter).\n4.  UnicodePlots. Plots generated with Unicode (text) characters right in the REPL.\n5.  Gaston. A Julia front-end for the GnuPlot back-end.\n6.  InspectDR\n7.  PGFPlotsX. Plotting engine based on TikZ - popular for $LaTeX$ documents\n\n### Installation\n\nThe `Plots.jl` package installed as a normal package via the package manager. This will also automatically install the `GR.jl` package as a dependency. In order to use the other back-ends, they must first be installed individually and then they must be activated, e.g.:\n\n``` julia\nusing Plots # Will use default back-end: GR\n\nplotlyjs() # Switch to PlotlyJS - previously installed\n# Plots.PlotlyJSBackend()\n\ngr() # Switch back to GR back-end\n# Plots.GRBackend()\n```\n\n### General use\n\nFor detailed documentation on all the features of Plots.jl, see the [manual](https://docs.juliaplots.org/stable/).\n\nA simple plot is generated with the `plot()` function. An existing plot can be added to with the `plot!()` function. If no plot variable is specified, this will add to the last generated plot. There are also mutating functions to add/modify the axis labels, plot title etc:\n\n-   title!()\n-   xlabel!()\n-   ylabel!()\n-   etc.\n\nYou can combine multiple plots in one. By default, the layout is a simple grid, but there is the option to specify complex layouts.\n\nYou can save the plot to file. Both `*.png` and `*.svg` formats are available and selected simply by specifying the extension in the filename.\n\nTwo examples:\n\n``` julia\nusing Plots\n\ndata1 = rand(5)\nx = randn(10)\ny = randn(10)\n\nplot(\n    plot(\n        data1,\n        label = \"some data\",\n        title=\"Line plot\",\n        xlabel=\"sample\",\n        ylabel=\"value\",\n        linecolor = :red,\n        linewidth = 3\n    ),\n    scatter(\n        x, y, \n        title = \"Scatter plot\",\n        label = \"samples\",\n        xlabel=\"x\",\n        ylabel=\"y\",\n        markercolor = :blue,\n        markershape = :diamond\n        )\n)\n\nsavefig(\"plotsexample.svg\")\n```\n\n![A plot generated with Plots.jl](./img/plotsexample1.svg)\n\n``` julia\ndata2 = rand(7)\ndata3 = rand(6)\nplot(data2, label=\"Experiment 2\", linestyle=:dashdotdot)\nplot!(data3, label= \"Experiment 3\", linewidth = 2)\ntitle!(\"Two series in a plot\")\nxlabel!(\"Sample number\")\nylabel!(\"Sample size\")\n\nsavefig(\"plotsexample2.svg\")\n```\n\n![Another plot generated with Plots.jl](./img/plotsexample2.svg)\n\n### More Advanced Examples\n\nYou can also generate contour and surface plots:\n\n``` julia\nf(x, y) = x*sin(x) - y^2 * cos(y)\nx = range(0, 5, length=100)\ny = range(0, 3, length=50)\nz = @. f(x', y)\ncontour(z)\nsavefig(\"img/plotscontour.svg\")\nsurface(x, y, z)\nsavefig(\"img/plotssurface.svg\")\n```\n\n![Plots.jl contour plot](./img/plotscontour.svg)\n\n![Plots.jl surface plot](./img/plotssurface.svg)\n\nThe `Plots.jl` package has a LOT more features than is shown here. This includes histograms, heatmaps and many more. See the [Plots.jl](https://docs.juliaplots.org/stable/) manual for details.\n\n:::{.callout-note}\nThose paying attention may have seen the `@.` in the previous example. This means every operator and function call in the line is broadcast automatically. I prefer explicitly broadcasting for clarity, but this is commonly used.\n:::\n\n### Statistics Plots\n\nThe `StatsPlots.jl` package is an extension of `Plots.jl` that adds typical statistics plots, like box plots, violin plots, kernel density plots etc. Refer to its [manual](https://docs.juliaplots.org/latest/generated/statsplots/) for more information."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"embed-resources":true,"output-file":"05_Plotting.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","theme":"cosmo","monofont":"JetBrains Mono","smooth-scroll":false,"footnotes-hover":true,"title":"Plotting"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}