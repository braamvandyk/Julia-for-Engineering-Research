{"title":"Running Julia","markdown":{"yaml":{"title":"Running Julia"},"headingText":"The REPL","containsRefs":false,"markdown":"\n\n\nWhen you open up Julia, you will be presented with the REPL (Read Execute Print Loop). This is basically a command prompt that Reads your input, Executes the instructions, Prints the results and then Loops back to waiting for a new input.\n\n```         \n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.9.1 (2023-06-07)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>\n```\n\nYou can enter code directly at the `julia>` prompt, but since none of this will be saved, it is probably not the preferred way of coding.\n\nA better way would be to save your code into a file, e.g. *myscript.jl*, and then execute this *script* by using the `include()` command. For example, if the file myscript.jl includes the following:\n\n``` julia\nusing UnicodePlots\n\nbarplot([\"A\", \"B\", \"C\"], rand(3))\n```\n\nthen my can run the script as follows:\n\n``` julia\ninclude(\"myscript.jl\")\n  #    ┌                                        ┐\n  #  A ┤■■■■■■■■■■■■■■■■■■■ 0.479201\n  #  B ┤■■■■■■■■■■■■■■■■ 0.394627\n  #  C ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 0.754307\n  #    └                                        ┘\n```\n\nYou can also run the script from the command line with:\n\n`julia myscript.jl`\n\nThe REPL has a few modes. You can access the package manager by pressing `]` at the `julia>` prompt. To access the help mode, use `?` (also inside the package manager). You can also access the underlying shell with `;`, but unless you are running Julia inside Windows Terminal, very little will work in Shell Mode.\n\nWhile it is good to be familiar with the REPL, realistically speaking, the most common thing the average user will do in the REPL is to access the package manager. This is where to install or remove packages and update installed packages.\n\nYou can use Unicode characters in the REPL, but unless you are using Windows Terminal, most non-ASCII characters won't display properly.\n\n### Keyboard Shortcuts\n\nThe REPL has command line completion. For example, if you typed:\n\n``` julia\ninclude(\"myscript.jl\")\n```\n\nin the previous example, then typing `inc` and pressing the up cursor will repeat the previous line that started with `inc`, i.e. `include(\"myscript.jl\")`.\n\nYou could also start typing a command and hit `<tab>` to get full command suggestions with some intelligence built-in. E.g., type `prin` and hit `<tab>`. Julia will complete the command to `print`. Hit `<tab>` again, and you get:\n\n``` julia\njulia> print\nprint        println      printstyled\njulia> print\n```\n\nSince there are more than one command that starts with `print`, Julia lists them all, creates a new prompt and starts off with the letters `print`, so you can complete the line.\n\nYou can clear the REPL with `ctrl-L` and close it with `ctrl-D` on an empty line.\n\n## Running Julia inside VSCode\n\nOne of the most common ways of working with Julia is from inside VSCode. If everything is set up correctly, simply do the following\n\n1.  Create a folder for your project\n2.  Right click inside the folder in Windows Explorer and select `Open with Code`. This will start up VSCode and open the folder inside the editor.\n3.  Add a file to contain your code. Be sure to give it a *.jl* extension, so VSCode can identify it as Julia code.\n\nNow you can enter code.\n\nTo execute the code, either click the run button to execute the whole file, or click on a line you want to execute and hit `Shift-Enter` to execute the code block. A code block is intelligently identified, so if the line you are on is inside a function definition, for example, the function will be compiled.\n\nOnce you are executing code, a Julia REPL will be open in the Terminal inside VSCode. Anything you can do in the REPL can be done here. The Julia add-in also provides more features, like listing all existing variables in the current scope and their values, as well as a plot pane and many other useful tools, such as debugger and a profiler.\n\n## Jupyter and Pluto\n\nThere are two more useful tools for running Julia. *Jupyter notebooks* and *Pluto notebooks*.\n\nThese run inside your browser. Code is entered in cells and results displayed below (Jupyter) or above (Pluto) the cell after it is executed.\n\nThe main difference between the two is that Jupyter cells are static - they only run when you execute them manually, while Pluto is *reactive*. If a cell in Pluto assigns a value to a variable and is edited, then Pluto will also execute all other cells that use this variable. To enable this, you should limit Pluto cells to single statements, or wrap code in a `begin..end` block, but still limit it to a single assignment per cell.\n\nJupyter can be used with Python and R as well as Julia (the name Jupyter is from **Ju**lia, **Pyt**hon and **R**) as well as \\~40 other languages. Pluto is only for Julia.\n\n### Installing Jupyter\n\nThe easiest way to install Jupyter is to add the `IJulia.jl` package to Julia from within the REPL. Julia will install a private copy of Python as well as all the add-ins it needs. To launch Jupyter, do the following from within Julia:\n\n``` julia\nusing IJulia\nnotebook(dir = \".\") # sets the starting folder to the current folder\n```\n\nThis will open up your default browser and start Jupyter with the Julia kernel selected.\n\n### Installing Pluto\n\nPluto is installed as a Julia package, so just open the package manager and `add Pluto`.\n\nTo launch Pluto, then do the following:\n\n``` julia\nusing Pluto\nPluto.run()\n```\n\nThis will open your default browser and start Pluto.","srcMarkdownNoYaml":"\n\n## The REPL\n\nWhen you open up Julia, you will be presented with the REPL (Read Execute Print Loop). This is basically a command prompt that Reads your input, Executes the instructions, Prints the results and then Loops back to waiting for a new input.\n\n```         \n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.9.1 (2023-06-07)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |\n\njulia>\n```\n\nYou can enter code directly at the `julia>` prompt, but since none of this will be saved, it is probably not the preferred way of coding.\n\nA better way would be to save your code into a file, e.g. *myscript.jl*, and then execute this *script* by using the `include()` command. For example, if the file myscript.jl includes the following:\n\n``` julia\nusing UnicodePlots\n\nbarplot([\"A\", \"B\", \"C\"], rand(3))\n```\n\nthen my can run the script as follows:\n\n``` julia\ninclude(\"myscript.jl\")\n  #    ┌                                        ┐\n  #  A ┤■■■■■■■■■■■■■■■■■■■ 0.479201\n  #  B ┤■■■■■■■■■■■■■■■■ 0.394627\n  #  C ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 0.754307\n  #    └                                        ┘\n```\n\nYou can also run the script from the command line with:\n\n`julia myscript.jl`\n\nThe REPL has a few modes. You can access the package manager by pressing `]` at the `julia>` prompt. To access the help mode, use `?` (also inside the package manager). You can also access the underlying shell with `;`, but unless you are running Julia inside Windows Terminal, very little will work in Shell Mode.\n\nWhile it is good to be familiar with the REPL, realistically speaking, the most common thing the average user will do in the REPL is to access the package manager. This is where to install or remove packages and update installed packages.\n\nYou can use Unicode characters in the REPL, but unless you are using Windows Terminal, most non-ASCII characters won't display properly.\n\n### Keyboard Shortcuts\n\nThe REPL has command line completion. For example, if you typed:\n\n``` julia\ninclude(\"myscript.jl\")\n```\n\nin the previous example, then typing `inc` and pressing the up cursor will repeat the previous line that started with `inc`, i.e. `include(\"myscript.jl\")`.\n\nYou could also start typing a command and hit `<tab>` to get full command suggestions with some intelligence built-in. E.g., type `prin` and hit `<tab>`. Julia will complete the command to `print`. Hit `<tab>` again, and you get:\n\n``` julia\njulia> print\nprint        println      printstyled\njulia> print\n```\n\nSince there are more than one command that starts with `print`, Julia lists them all, creates a new prompt and starts off with the letters `print`, so you can complete the line.\n\nYou can clear the REPL with `ctrl-L` and close it with `ctrl-D` on an empty line.\n\n## Running Julia inside VSCode\n\nOne of the most common ways of working with Julia is from inside VSCode. If everything is set up correctly, simply do the following\n\n1.  Create a folder for your project\n2.  Right click inside the folder in Windows Explorer and select `Open with Code`. This will start up VSCode and open the folder inside the editor.\n3.  Add a file to contain your code. Be sure to give it a *.jl* extension, so VSCode can identify it as Julia code.\n\nNow you can enter code.\n\nTo execute the code, either click the run button to execute the whole file, or click on a line you want to execute and hit `Shift-Enter` to execute the code block. A code block is intelligently identified, so if the line you are on is inside a function definition, for example, the function will be compiled.\n\nOnce you are executing code, a Julia REPL will be open in the Terminal inside VSCode. Anything you can do in the REPL can be done here. The Julia add-in also provides more features, like listing all existing variables in the current scope and their values, as well as a plot pane and many other useful tools, such as debugger and a profiler.\n\n## Jupyter and Pluto\n\nThere are two more useful tools for running Julia. *Jupyter notebooks* and *Pluto notebooks*.\n\nThese run inside your browser. Code is entered in cells and results displayed below (Jupyter) or above (Pluto) the cell after it is executed.\n\nThe main difference between the two is that Jupyter cells are static - they only run when you execute them manually, while Pluto is *reactive*. If a cell in Pluto assigns a value to a variable and is edited, then Pluto will also execute all other cells that use this variable. To enable this, you should limit Pluto cells to single statements, or wrap code in a `begin..end` block, but still limit it to a single assignment per cell.\n\nJupyter can be used with Python and R as well as Julia (the name Jupyter is from **Ju**lia, **Pyt**hon and **R**) as well as \\~40 other languages. Pluto is only for Julia.\n\n### Installing Jupyter\n\nThe easiest way to install Jupyter is to add the `IJulia.jl` package to Julia from within the REPL. Julia will install a private copy of Python as well as all the add-ins it needs. To launch Jupyter, do the following from within Julia:\n\n``` julia\nusing IJulia\nnotebook(dir = \".\") # sets the starting folder to the current folder\n```\n\nThis will open up your default browser and start Jupyter with the Julia kernel selected.\n\n### Installing Pluto\n\nPluto is installed as a Julia package, so just open the package manager and `add Pluto`.\n\nTo launch Pluto, then do the following:\n\n``` julia\nusing Pluto\nPluto.run()\n```\n\nThis will open your default browser and start Pluto."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"embed-resources":true,"output-file":"03_Running_Julia.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","theme":"cosmo","monofont":"JetBrains Mono","smooth-scroll":false,"footnotes-hover":true,"title":"Running Julia"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}