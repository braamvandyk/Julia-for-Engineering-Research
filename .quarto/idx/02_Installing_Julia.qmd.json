{"title":"Installing Julia","markdown":{"yaml":{"title":"Installing Julia"},"headingText":"Windows Terminal","containsRefs":false,"markdown":"\n\nTo use Julia, you need two things:\n\n1.  The Julia compiler\n2.  A code editor\n\nIt is also recommended that you consider a few additional tools, although they are optional.\n\n\nWhile not strictly required, installing Windows Terminal is highly recommended. Windows Terminal is a much more modern replacement for the venerable Windows command prompt. It has the same features as a typical Linux terminal and will make your experience of the Julia REPL a lot more pleasant.\n\nIf you are going to use Windows Terminal, install it first, from the Microsoft Store. If you then install Julia or Git, they will automatically configure themselves in Windows Terminal.\n\n## The Julia compiler\n\nThere are several ways to install Julia on your machine, whether or not you have local administrator rights. Julia will happily run from a user-only installation, or you can install it for all users on your machine. You can also use a portable (not installed) version.\n\n### Direct download and install\n\nYou can download and install Julia from the official [homepage](www.julialang.org). The 64-bit version is recommended, unless you have a specific reason to want a 32-bit version.\n\n### Microsoft Store\n\nThe recommended way of installing Julia, if this is an option for you, is via the Microsoft Store. Installing Julia this way actually installs JuliaUp, an installation manager for Julia.\n\nJuliaUp allows you to have multiple installations of Julia, e.g., the current release version as well as the current development (pre-release) version.\n\nYou can easily switch between them with a single command-line instruction. JuliaUp will also automatically keep your Julia installation updated when a new version is released.\n\nYou can install from the Microsoft Store application, or from the command-line with:\n\n```         \nwinget install julia -s msstore\n```\n\nYou can then add and manage various Julia installations using the JuliaUp tool, e.g.\n\n```         \njuliaup add release         # add the current release channel\njuliaup add rc              # add current release candidate channel\njuliaup add beta            # add current beta channel\njuliaup st                  # get status of installed versions\njuliaup default release     # set the version to use\njulia --help                # see the help options\n```\n\nYou can also directly launch a specific installed channel, e.g.\n\n```         \njulia +rc\n```\n\n## Visual Studio Code\n\nThe recommended code editor for Julia is Visual Studio Code (VSCode). This is a Microsoft project that is free and partially open-sourced. You can download and install it from the official [homepage](code.visualstudio.com) or via the Microsoft Store.\n\nVSCode will prompt you to install updates, so there is less reason to want to install this from the Microsoft Store. New releases are typically available monthly.\n\n### The Julia Add-in for VSCode\n\nVSCode is a general-purpose code editor. To use it with Julia, you need to install the Julia add-in from within VSCode. You can also install Python, R, C, Fortran and many other add-ins.\n\nIf you are adventurous, you can install the *insider version* of the Julia add-in, but this is not recommended for for typical end-users. The insider version is the pre-release version with newer, but not yet fully tested features.\n\nThe Julia add-in not only links Julia to VSCode seamlessly, but it also provides a debugger and many other tools, like compiling system images for quicker start-up.\n\nSee the [documentation](https://www.julia-vscode.org/docs/stable/) for more information.\n\n### Other Useful Add-ins\n\nSome add-ins recommended for everyday use are:\n\n-   Edit CSV\n-   Rainbow CSV\n-   SandDance for VSCode\n-   SVG\n\n**Edit CSV** allows for easy editing CSV (Comma-Separated Values) files right within VSCode, so you don't need to go back to Excel for small edits.\n\n**Rainbow CSV** colour-codes the columns in CSV files, making it much easier to work with them.\n\n**SandDance** generates plots of the data in a CSV for quick data exploration.\n\n**SVG** allows you to preview SVG (Scalable Vector Graphics) files inside VSCode. Most of the plotting packages can save plots as SVG files, which is recommended, since you can zoom in or out infinitely without loss of quality. Microsoft Office can include SVG files in, e.g., Word and PowerPoint.\n\nFor writing technical documents that include running code, e.g., to generate the plots, and to publish these to web pages, .PDF or DOCX documents, among others, consider Quarto (this will require the installation of the [Quarto](https://quarto.org/) program as well as the VSCode add-in)\n\n## Fonts\n\nJulia can make full use of Unicode fonts. This means you can use Greek letters, emojis or anything else as variable names. Julia will also use common mathematical symbols, although there are alternatives for those who prefer to stick to ASCII. For examples:\n\n``` julia\nmass = 1.23\nvol = 2.56\n\nρ = mass/vol\nif 0.1 ≤ ρ ≤ 1.0\n    if ρ ≈ 0.48\n        println(\"Correct\")\n    end\nend\n```\n\nThis reads a lot more like what you would normally write out by hand, e.g., using `ρ` instead of `rho`. In the place of `≈`, you can use the `isapprox()` function, which has a few more options.\n\nIf you are using a font that supports font ligatures, you may see `≤` symbols instead of `<`, followed by `=`. This is entirely optional as well. You simply type a `<` followed by `=`, and with the correct fonts installed, this will automatically be rendered as `≤` without changing the contents of the actual source code file. If you don't like that, just change the option in VSCode that allows use of font ligatures.\n\nTo make use of the Unicode abilities in you need a font installed that can handle ligatures and has a decent coverage of Unicode symbols. The following are recommended - [JetBrains Mono](https://www.jetbrains.com/lp/mono/) - [JuliaMono](https://juliamono.netlify.app/) - [Fira Code](https://github.com/tonsky/FiraCode)\n\nVSCode uses fall-back fonts, so if the first font specified in the settings does not include the character it should render, it will look in the next font until it finds the glyph, or runs out of fonts to look in. You can therefore install all three these fonts and then add them to the from of the list of specified fonts.\n\nYou use Unicode characters by typing, e.g., `\\rho` and pressing the `<tab>` key. If you find a character in someone's code that you don't know how to type, simply copy it and paste it next to the help[^1] prompt in Julia:\n\n[^1]: You access the help mode by typing ? at the REPL prompt.\n\n``` julia\nhelp?> ℱ\n\"ℱ\" can be typed by \\scrF<tab>\n```\n\nThere is a comprehensive list available in the [manual](https://docs.julialang.org/en/v1/manual/unicode-input/).\n\n## Git\n\nGit is a version control software. No, more accurately, Git is THE version control software. You do not need to use Git, but it will most certainly make your life a lot easier if you are either working in a team or working on large projects.\n\nGit is integrated into VSCode, but it is often handy to have the command-line version. You can get it from the Git [homepage](https://git-scm.com/). Like Julia and VSCode, Git is free and open-sourced.\n\nIt is worth your time to learn at least the basics of Git. There is a free book, available on-line, to assist you: [Pro Git](https://git-scm.com/book/en/v2)","srcMarkdownNoYaml":"\n\nTo use Julia, you need two things:\n\n1.  The Julia compiler\n2.  A code editor\n\nIt is also recommended that you consider a few additional tools, although they are optional.\n\n## Windows Terminal\n\nWhile not strictly required, installing Windows Terminal is highly recommended. Windows Terminal is a much more modern replacement for the venerable Windows command prompt. It has the same features as a typical Linux terminal and will make your experience of the Julia REPL a lot more pleasant.\n\nIf you are going to use Windows Terminal, install it first, from the Microsoft Store. If you then install Julia or Git, they will automatically configure themselves in Windows Terminal.\n\n## The Julia compiler\n\nThere are several ways to install Julia on your machine, whether or not you have local administrator rights. Julia will happily run from a user-only installation, or you can install it for all users on your machine. You can also use a portable (not installed) version.\n\n### Direct download and install\n\nYou can download and install Julia from the official [homepage](www.julialang.org). The 64-bit version is recommended, unless you have a specific reason to want a 32-bit version.\n\n### Microsoft Store\n\nThe recommended way of installing Julia, if this is an option for you, is via the Microsoft Store. Installing Julia this way actually installs JuliaUp, an installation manager for Julia.\n\nJuliaUp allows you to have multiple installations of Julia, e.g., the current release version as well as the current development (pre-release) version.\n\nYou can easily switch between them with a single command-line instruction. JuliaUp will also automatically keep your Julia installation updated when a new version is released.\n\nYou can install from the Microsoft Store application, or from the command-line with:\n\n```         \nwinget install julia -s msstore\n```\n\nYou can then add and manage various Julia installations using the JuliaUp tool, e.g.\n\n```         \njuliaup add release         # add the current release channel\njuliaup add rc              # add current release candidate channel\njuliaup add beta            # add current beta channel\njuliaup st                  # get status of installed versions\njuliaup default release     # set the version to use\njulia --help                # see the help options\n```\n\nYou can also directly launch a specific installed channel, e.g.\n\n```         \njulia +rc\n```\n\n## Visual Studio Code\n\nThe recommended code editor for Julia is Visual Studio Code (VSCode). This is a Microsoft project that is free and partially open-sourced. You can download and install it from the official [homepage](code.visualstudio.com) or via the Microsoft Store.\n\nVSCode will prompt you to install updates, so there is less reason to want to install this from the Microsoft Store. New releases are typically available monthly.\n\n### The Julia Add-in for VSCode\n\nVSCode is a general-purpose code editor. To use it with Julia, you need to install the Julia add-in from within VSCode. You can also install Python, R, C, Fortran and many other add-ins.\n\nIf you are adventurous, you can install the *insider version* of the Julia add-in, but this is not recommended for for typical end-users. The insider version is the pre-release version with newer, but not yet fully tested features.\n\nThe Julia add-in not only links Julia to VSCode seamlessly, but it also provides a debugger and many other tools, like compiling system images for quicker start-up.\n\nSee the [documentation](https://www.julia-vscode.org/docs/stable/) for more information.\n\n### Other Useful Add-ins\n\nSome add-ins recommended for everyday use are:\n\n-   Edit CSV\n-   Rainbow CSV\n-   SandDance for VSCode\n-   SVG\n\n**Edit CSV** allows for easy editing CSV (Comma-Separated Values) files right within VSCode, so you don't need to go back to Excel for small edits.\n\n**Rainbow CSV** colour-codes the columns in CSV files, making it much easier to work with them.\n\n**SandDance** generates plots of the data in a CSV for quick data exploration.\n\n**SVG** allows you to preview SVG (Scalable Vector Graphics) files inside VSCode. Most of the plotting packages can save plots as SVG files, which is recommended, since you can zoom in or out infinitely without loss of quality. Microsoft Office can include SVG files in, e.g., Word and PowerPoint.\n\nFor writing technical documents that include running code, e.g., to generate the plots, and to publish these to web pages, .PDF or DOCX documents, among others, consider Quarto (this will require the installation of the [Quarto](https://quarto.org/) program as well as the VSCode add-in)\n\n## Fonts\n\nJulia can make full use of Unicode fonts. This means you can use Greek letters, emojis or anything else as variable names. Julia will also use common mathematical symbols, although there are alternatives for those who prefer to stick to ASCII. For examples:\n\n``` julia\nmass = 1.23\nvol = 2.56\n\nρ = mass/vol\nif 0.1 ≤ ρ ≤ 1.0\n    if ρ ≈ 0.48\n        println(\"Correct\")\n    end\nend\n```\n\nThis reads a lot more like what you would normally write out by hand, e.g., using `ρ` instead of `rho`. In the place of `≈`, you can use the `isapprox()` function, which has a few more options.\n\nIf you are using a font that supports font ligatures, you may see `≤` symbols instead of `<`, followed by `=`. This is entirely optional as well. You simply type a `<` followed by `=`, and with the correct fonts installed, this will automatically be rendered as `≤` without changing the contents of the actual source code file. If you don't like that, just change the option in VSCode that allows use of font ligatures.\n\nTo make use of the Unicode abilities in you need a font installed that can handle ligatures and has a decent coverage of Unicode symbols. The following are recommended - [JetBrains Mono](https://www.jetbrains.com/lp/mono/) - [JuliaMono](https://juliamono.netlify.app/) - [Fira Code](https://github.com/tonsky/FiraCode)\n\nVSCode uses fall-back fonts, so if the first font specified in the settings does not include the character it should render, it will look in the next font until it finds the glyph, or runs out of fonts to look in. You can therefore install all three these fonts and then add them to the from of the list of specified fonts.\n\nYou use Unicode characters by typing, e.g., `\\rho` and pressing the `<tab>` key. If you find a character in someone's code that you don't know how to type, simply copy it and paste it next to the help[^1] prompt in Julia:\n\n[^1]: You access the help mode by typing ? at the REPL prompt.\n\n``` julia\nhelp?> ℱ\n\"ℱ\" can be typed by \\scrF<tab>\n```\n\nThere is a comprehensive list available in the [manual](https://docs.julialang.org/en/v1/manual/unicode-input/).\n\n## Git\n\nGit is a version control software. No, more accurately, Git is THE version control software. You do not need to use Git, but it will most certainly make your life a lot easier if you are either working in a team or working on large projects.\n\nGit is integrated into VSCode, but it is often handy to have the command-line version. You can get it from the Git [homepage](https://git-scm.com/). Like Julia and VSCode, Git is free and open-sourced.\n\nIt is worth your time to learn at least the basics of Git. There is a free book, available on-line, to assist you: [Pro Git](https://git-scm.com/book/en/v2)"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"embed-resources":true,"output-file":"02_Installing_Julia.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.361","theme":"cosmo","monofont":"JetBrains Mono","smooth-scroll":false,"footnotes-hover":true,"title":"Installing Julia"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}