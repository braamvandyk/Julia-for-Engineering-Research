---
title: "An Overview of the Language"
---


## Package Management
Julia will open up in the default environment, e.g. `@v1.8`. You can add packages to this environment and they will be available to load as soon as you open Julia. Be very careful about doing this, as this can very often lead to what is lightly called *dependency hell*. This is what happens when a package you want to update depends on another package that can't update, sometime because it depends on a specific version of yet another package. The more packages you have in the current environment, to more often this will happen. The solution is to create a new environment for each project and add only the packages you are actually using in the project.

```
               _
   _       _ _(_)_     |  Documentation: https://docs.julialang.org
  (_)     | (_) (_)    |
   _ _   _| |_  __ _   |  Type "?" for help, "]?" for Pkg help.
  | | | | | | |/ _` |  |
  | | |_| | | | (_| |  |  Version 1.8.5 (2023-01-08)
 _/ |\__'_|_|_|\__'_|  |  Official https://julialang.org/ release
|__/                   |

julia> cd("./Dummy")

julia> pwd()
"D:\\JuliaCode\\Dummy"

(@v1.8) pkg> activate .
  Activating project at `D:\JuliaCode\Dummy`

(Dummy) pkg> add UnicodePlots
    Updating registry at `C:\Users\Braam\.julia\registries\General.toml`
   Resolving package versions...
    Updating `D:\JuliaCode\Dummy\Project.toml`
  [b8865327] + UnicodePlots v3.4.1
    Updating `D:\JuliaCode\Dummy\Manifest.toml`
  [d360d2e6] + ChainRulesCore v1.15.7
  [9e997f8a] + ChangesOfVariables v0.1.6
  [35d6a980] + ColorSchemes v3.20.0
  .
  .
  .

(Dummy) pkg> st
Status `D:\JuliaCode\Dummy\Project.toml`
  [b8865327] UnicodePlots v3.4.1
```

Here we changed the current directory to the *Dummy* sub-folder. Note the use of a forward slash. Backslashes are used for special characters, e.g. `\n` for a new line and must themselves be *escaped* by typing a double backslash: `cd(".\\Dummy")`. Or you can use a raw string: `cd(raw".\Dummy")`. The forward slash however works just as well in Linux and MaxOS, so is preferred.

`pwd()` is a function that replicates the Unix (Linux) command for *print working directory* and simply returns the name of the current folder. 

The package manager is then activated with `]` and the current folder is activated as a project with `activate .`, where `.` means the current directory (`..` means the parent directory).

Finally we add a registered package, UnicodePlots.jl, and once the installation is done, check which packages and versions are currently installed with the `st` command (short for `status`).

Once a package is installed, it can be loaded by issuing the `using` command:

```julia
julia> using UnicodePlots
```

In the `Dummy` folder, Julia creates two files: `project.toml` and `manifest.toml`. These hold the record of the specific versions of packages that have been installed. The packages directly installed are in the `project.toml` file, while the version numbers of dependencies are tracked in `manifest.toml`. These two files mean that someone else can reinstate the exact environment you developed your code in by activating the project and issuing the `instantiate` command to the package manager. This will install the same versions of the packages and dependencies as listed in the `*.toml` files.

Each project should be in its own folder, with its own `*.toml` files. This means different projects can potentially use different versions of the same package, depending on what other packages are in use.

To update the packages and dependencies to the latest versions (as allowed for by the specified versions of dependencies for each packages), use the `up` command of the package manager. This updates packages for the **current** project only.

## Using vs Import

There are two ways to load a Julia package: `using` and `import`

If you use `using`, all methods and variables exported by a package are brought into the current namespace. You can call them directly:

```julia
using Plots

scatter(rand(10), rand(10))
```

This does mean that several functions and variables you are not using are now also in the namespace and you cannot define a new function with the same name, or use another package that exports a function with the same name. For those cases, you can use `import`. If a package is `import`ed, you need to prepend each function call with the package name.

```julia
import Plots
import GLMakie

Plots.scatter(rand(10), rand(10))
GLMakie.scatter(rand(10), rand(10))
```

::: {.callout-tip}
## Try this

See what happens when you use `using` for the previous example.
:::

You can load specific functions or variables from a package:

```julia
using Plots: scatter
import GLMakie: lines
```

None of the other exported variables or functions will become available. When loading a single item, you can also rename it using the `as` keyword:

```julia
import Plots.scatter as ps
import GLMakie: scatter as ms

ps(rand(10), rand(10))
ms(rand(10), rand(10))
```

or even rename the package during import:

```julia
julia> import BenchmarkTools as bt

julia> bt.@benchmark sin.(1:1_000_000)
BenchmarkTools.Trial: 400 samples with 1 evaluation.
 Range (min … max):  11.751 ms … 24.278 ms  ┊ GC (min … max): 0.00% … 49.13%
 Time  (median):     12.043 ms              ┊ GC (median):    0.00%
 Time  (mean ± σ):   12.515 ms ±  2.246 ms  ┊ GC (mean ± σ):  3.56% ±  9.50%

  ▆█▅
  ████▆▁▄▁▁▁▁▄▁▁▁▁▁▁▁▁▁▁▁▁▄▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▄▁▁▁▁▅▇▆ ▆
  11.8 ms      Histogram: log(frequency) by time        24 ms <

 Memory estimate: 7.63 MiB, allocs estimate: 2.

```

## Variables
There is no programming without variables. In Julia, there is no need to pre-declare a variable (although you can) and variables can be reassigned to a value of another type:

```julia
julia> x = 1
1

julia> typeof(x)
Int64

julia> x = 2.4
2.4

julia> typeof(x)
Float64

julia> x = "Hello, World"
"Hello, World"

julia> typeof(x)
String
```
When assigning a value to the variable `x`, Julia infers the type of the value, e.g. `Int64` and then associates the name, `x`, with that value.

As illustrated, the function `typeof()` will return the type of the variable or value. While you don't have to specify the types of variables, Julia is a *strongly-typed* language, just like C or Fortran. The type of a variable is just automatically inferred whenever possible.

Since variables can be reassigned in the global scope, this makes it difficult for the compiler to generate optimised code - the type of the variable could change. If you want fast code, then avoid using global variables, or if you absolutely have to use them, declare them as `const`.

```julia
julia> const MyConst = 1
1

julia> typeof(MyConst)
Int64

julia> MyConst = 2
WARNING: redefinition of constant MyConst. This may fail, cause incorrect answers, or produce other errors.
2

julia> MyConst = 2.0
ERROR: invalid redefinition of constant MyConst
Stacktrace:
 [1] top-level scope
   @ REPL[4]:1
```

Declaring a variable as `const` freezes the type of the variable, allowing more optimisations. It is possible, but not recommended, to change the value, but not the type. It is expected that changes to the values will also be prevented in future versions of Julia.

The best practise however, is to put your code inside functions.

### Strings and Characters
Text values are stored as either strings (`"This is a string"`, type `String`) or single characters (`'c'`, type `Char`). A string can also be just one character long: `"A"`. Strings can also include multiple lines, and quotation marks, when enclosed with triple quotation marks:

```julia
julia> s = """
       This is my
       very long
       string with "quotes"
       """
"This is my \nvery long\nstring with \"quotes\"\n"  

julia> s[5]
' ': ASCII/Unicode U+0020 (category Zs: Separator, space)

julia> s[5:10]
" is my"
```
Note how new lines are indicated with `'\n'`, which is itself a character.

Numerical values can be converted to strings using the `string()` function:
```julia
julia> string(123)
"123"
```

Strings and characters in Julia are encoded in UTF-8 Unicode. This allows all kinds of characters, from mathematical symbols to Chinese characters and emojis to be used. It also means that not all *glyphs* take the same amount of memory to store. This can be confusing when processing strings. If you intend to work with strings, read the relevant sections of the [manual](https://docs.julialang.org/en/v1/manual/strings/#Unicode-and-UTF-8) carefully.

A somewhat unintuitive feature of Julia is that string concatenation is done via the `*` operator. This does have the advantage that multiple copies of a string can be concatenated via the exponentiation (`^`) operator:

```julia
julia> str = "lala"
"lala"

julia> str*str
"lalalala"

julia> str^5
"lalalalalalalalalala"
```

Julia includes a vast number of string processing functions. These are discussed in detail in the [manual](https://docs.julialang.org/en/v1/manual/strings/).

#### String Interpolation
You can *interpolate* a value from a variable or expression into a string, using the `$` character:

```julia
julia> value = 1.0
1.0

julia> key = "myvar"
"myvar"

julia> println("The key is: $key and the value is: $value.")
The key is: myvar and the value is: 1.0.

julia> println("Twice the value is: $(2*value)")
Twice the value is: 2.0
```

### Integers and Floating-point Values
Julia has the usual selection of variable types for integers and floating point values. There are signed and unsigned versions of 8, 16, 32, 64 and 128-bit integers. See the [manual](https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/) for details.

There is also a `Bool` type that holds either `true` (1) or `false` (0).

For floating point values, there is Float16, Float32 and Float64.

The default integer, `Int` is Int64 for 64-bit Julia and `Int32` for 32-bit Julia. Generally, you would want to use `Float64` for floating-point numbers, unless there is a specific reason not to. Calculations on a GPU (via e.g. `CUDA.jl`) should be done using `Float32`.

#### A Word on Floating Point Values
Floating point values are stored in a limited number of bits (typically 64 bits - a.k.a. double precision) and hence have a limited precision. The result is that most values cannot be precisley stored in a `Float64` variable. As a simple example, 1/10, which is clearly precisely equal to 0.1, is actually calculated as 0.1000000000000000055511151231257827021181583404541015625 with 256-bit precision.

The smallest positive value that can be stored in a `Float64`, is 2.220446049250313e-16. You can calculate this in Julia using the `eps()` function, e.g. `eps(Float64)`. The value epsilon is an indication of the precision you can expect. It is the smallest value you can add to the floating point value that will cause it to result in a new value. Anything smaller may as well be zero. Obviously epsilon depends on the magnitude of the values you are working with and you can again use the `eps()` function: `eps(100) = 1.4210854715202004e-14`, so adding a smaller amount to 100 will not change the value.

While you can safely ignore this for many, if not most engineering calculations, it can sometimes become an issue when you least expect it. Consider adding up a very large number of small values. The larger the difference between the running total and the next value you are adding, the larger the rounding error will become. At some point in this exercise, the value you are adding to the running total will be in the order of the relative epsilon and the running total will stop increasing, no matter how many more values you add. The solution to this is actually fairly simple and implemented in the Julia `sum()` function.

The list of values is split into pairs and the pairs are added to each other, then this is repeated over and over until there is only one value left - the answer. The algorithm works under the inherent assumption that the values are fairly equally sized and so adding similar values results in minimal rounding error. Once the pairs have been summed, the new values should also be simialrly sized and so the process repeats, with a minimum rounding error at each step.

Something else to consider, which much more often trips up new programmers, is that you will very rarely find two identical floating point values through calculations. Directly comparing values that are realistically speaking equal, will very often result in the wrong part of an `if` statement executing. When comparing floating point values, always use a check for approximate equality. This is done either via the `≈` operator (`\approx<tab>`), or the `isapprox()` function, which allows you to specify absolute and relative tolerances. The `≈` operator calls `isapprox()` with default tolerances.

The internal storage of floating point values is standardised by the [IEEE 754](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) standard, which is used in just about every programming language.

### BigInt and BigFloat
Sometimes, you may find a need for additional precision. Arbitrary precicion integer and floating point types are available as BigInt and BigFloat. 

There are several ways to specifiy that you are using `big` numbers, but the simplest is via the `big()` function:

```julia
julia> x = big(10.0)
10.0

julia> typeof(x)
BigFloat
```
The precision again comes at the cost of performance. See the [manual](https://docs.julialang.org/en/v1/base/numbers/#BigFloats-and-BigInts) for more details.

### Complex Numbers
Julia has built-in types for complex numbers, which depend on the integer or floating-point type used to store the real and imaginary parts, e.g.

```julia
julia> typeof(1 + 2im)
Complex{Int64}

julia> typeof(1.0 + 2.0im)
ComplexF64 (alias for Complex{Float64})
```
As you will notice, a complex type is specified as `Complex{T}` where T is an integer or floating point type. Any of the integer and floating points types mentioned before could be used, including `BigInt` and `BigFloat`. Simply define the value as:

```julia
julia> z = big(10.0) + 1.0im
10.0 + 1.0im

julia> typeof(z)
Complex{BigFloat}

julia> z = big(10) + 1im
10 + 1im

julia> typeof(z)
Complex{BigInt}
```

The imaginary part of the number is indicated by adding `im` directly behind the number - no space!

The standard functions used with complex numbers are available, including:

```julia
julia> z = 1 + 1im
1 + 1im

julia> real(z) # real part
1

julia> imag(z) # imaginary part
1

julia> conj(z) # complex conjugate
1 - 1im

julia> abs(z) # absolute value - distance from zero
1.4142135623730951

julia> abs2(z) # squared absolute value
2

julia> angle(z) # phase angle (radians)
0.7853981633974483

julia> angle(z) * 360/2π # convert to degrees
45.0

julia> √z
1.09868411346781 + 0.45508986056222733im

julia> sqrt(z)
1.09868411346781 + 0.45508986056222733im
```
### Rational Numbers
You can also work with rational numbers. 

```julia
julia> a = 1//2 + 3//8
7//8

julia> float(a)
0.875

julia> rationalize(0.875)
7//8
```
This eliminates rounding losses, but at a loss of performance:

```julia
julia> function myfunc(x)
           sum = zero(x)
           for i in 1:10_000
               sum += x * i
           end
           return sum
       end

myfunc (generic function with 1 method)

julia> using BenchmarkTools

julia> @benchmark myfunc(1.0)
BenchmarkTools.Trial: 10000 samples with 3 evaluations.
 Range (min … max):  8.500 μs …  73.733 μs  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     8.700 μs               ┊ GC (median):    0.00%
 Time  (mean ± σ):   8.704 μs ± 966.620 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▅  █  ▆  ▃         █  █   ▅  ▂  ▁   ▁  ▁                    ▂
  █▁▁█▁▁█▁▁█▁▁▁█▁▁█▁▁█▁▁█▁▁▁█▁▁█▁▁█▁▁▁█▁▁█▁▁█▁▁█▁▁▁▇▁▁█▁▁▇▁▁▄ █
  8.5 μs       Histogram: log(frequency) by time       9.1 μs <

 Memory estimate: 0 bytes, allocs estimate: 0.

julia> @benchmark myfunc(1//1)
BenchmarkTools.Trial: 7295 samples with 1 evaluation.
 Range (min … max):  663.600 μs …  1.234 ms  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     680.100 μs              ┊ GC (median):    0.00%
 Time  (mean ± σ):   682.504 μs ± 29.021 μs  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▇█▆▃▂▃██▅▄▃▃▃▂▃▁▁▁▁       ▁                                  ▂
  ███████████████████████▇▇████▇▇█▆▆▇▇▇▅▆▆▅▆▅▅▅▃▅▅▄▆▅▃▅▅▄▄▁▃▃▅ █
  664 μs        Histogram: log(frequency) by time       811 μs <

 Memory estimate: 0 bytes, allocs estimate: 0.
 ```

So, floating point calculations are about 78x faster than with rational numbers. What about integers?

```julia
julia> @benchmark myfunc(1)
BenchmarkTools.Trial: 10000 samples with 1000 evaluations.
 Range (min … max):  1.900 ns … 27.200 ns  ┊ GC (min … max): 0.00% … 0.00%
 Time  (median):     2.000 ns              ┊ GC (median):    0.00%
 Time  (mean ± σ):   1.976 ns ±  0.530 ns  ┊ GC (mean ± σ):  0.00% ± 0.00%

  ▄                                                        █
  █▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█ ▂
  1.9 ns         Histogram: frequency by time           2 ns <

 Memory estimate: 0 bytes, allocs estimate: 0.
```
1.9 nanoseconds?!? That sounds too good to be true, doesn't it? Let's see what type of code Julia generated to make that possible.

```julia
julia> @code_llvm myfunc(1)
;  @ REPL[6]:1 within `myfunc`
; Function Attrs: uwtable
define i64 @julia_myfunc_739(i64 signext %0) #0 {
top:
;  @ REPL[6]:3 within `myfunc`
  %1 = mul i64 %0, 50005000
;  @ REPL[6]:6 within `myfunc`
  ret i64 %1
}
```

We can again ignore any line starting with a semi-colon. The one line that matters is this:

```julia
  %1 = mul i64 %0, 50005000
```

The Julia compiler could analyse the code well enough to see that the answer to our function is sumply 50005000 times the input value and that is exactly what it returned!

With floating point and rational values, there were type conversions required before multiplying the integer value of the loop counter with the input value. This "hid" the true nature of the calculation enough that the compiler could not see the short-cut. There is however continuous development in the compiler and we can reasonbly expect this to also be optimised in a future version of Julia.

### Arrays, Tuples and Ranges
#### Arrays
In most code, you will find it convenient to deal with a collection of values at the same time. There are several ways of doing this.

The most common collection of values is an Array. In mathematics, you will be familar with vectors and matrices. These are simply one- and two dimensional arrays. You can have arrays with any number of dimensions (*tensors*). The keywords `Vector` and `Matrix` are also available as synonyms for `Array` in the special cases of one and two dimensions.

::: {.callout-note}
Simple one dimensional arrays are treated as column vectors for use in linear algebra calculations.
:::

Some examples:

```julia
julia> a = [1, 2, 3]   # use commas to specify column vectors
3-element Vector{Int64}:
 1
 2
 3

julia> b = [1 2 3]   # use spaces to specify row vectors
1×3 Matrix{Int64}:
 1  2  3

julia> a * b 
3×3 Matrix{Int64}:
 1  2  3
 2  4  6
 3  6  9

julia> A = [1 2 3;   # directly specify a 2D array a.k.a. a matrix
            4 5 6;
            7 8 9]
3×3 Matrix{Int64}:
 1  2  3
 4  5  6
 7  8  9

julia> B = zeros(3, 3, 3)   # zeros() and ones() fill the array of the specified size
3×3×3 Array{Float64, 3}:
[:, :, 1] =
 0.0  0.0  0.0
 0.0  0.0  0.0
 0.0  0.0  0.0

[:, :, 2] =
 0.0  0.0  0.0
 0.0  0.0  0.0
 0.0  0.0  0.0

[:, :, 3] =
 0.0  0.0  0.0
 0.0  0.0  0.0
 0.0  0.0  0.0 

julia> C = [1;2;;3;4;;;5;6;;7;8;;;9;10;;11;12]  # ; separates in first dimension, ;; in second dimension, ;;; in third etc.
2×2×3 Array{Int64, 3}:
[:, :, 1] =
 1  3
 2  4

[:, :, 2] =
 5  7
 6  8

[:, :, 3] =
  9  11
 10  12

julia> A = Float64[]   # an empty 1D array of Float64
Float64[]
```

The individual entries of an array are accessed via `[]`, e.g. 
```julia
julia> A[2, 3]
6
```
In the background, `[]` calls  `getindex()` and `setindex()` to retrieve or modify the entries of the array. If you define your own array-like type, you will need to supply the appropriate `getindex()` and `setindex()` functions.

You can concatenate arrays horizontally and vertically with `hcat()` and `vcat()`, or using the syntax above with spaces or semi-colons:

```julia
julia> A = [1, 2, 3]
3-element Vector{Int64}:
 1
 2
 3

julia> B = [4, 5, 6]
3-element Vector{Int64}:
 4
 5
 6

julia> [A; B]
6-element Vector{Int64}:
 1
 2
 3
 4
 5
 6

julia> [A B]
3×2 Matrix{Int64}:
 1  4
 2  5
 3  6

julia> vcat(A, B)
6-element Vector{Int64}:
 1
 2
 3
 4
 5
 6

julia> hcat(A, B)
3×2 Matrix{Int64}:
 1  4
 2  5
 3  6
```

#### Tuples
Tuples are functionally similar to arrays. They are specified with commas and (optional) parentheses. They are intimately linked with passing parameters to functions and returning values from functions, e.g.

```julia
julia> function myfunc(a, b)
           return a*b, a+b
       end
myfunc (generic function with 1 method)

julia> myfunc(1, 2)
(2, 3)

julia> typeof(myfunc(1, 2))
Tuple{Int64, Int64}
```

We pass the parameters to the function as a tuple, (a, b). The results are returned as a tuple, (2, 3). Other than passing parameters to functions, what is the use of tuples? They are fairly widely used in Julia. The main differences from arrays are that while arrays are heap-allocated, tuples are stack-allocated. This is some more computer jargon, but what it means in practise is that tuples can be accessed faster than arrays, but cannot be as large.

Tuples are also *immutable*, meaning once created, they cannot be modified. The entries of an array can always be modified. This is important to keep in mind when writing functions in Julia. The only way you can modify a parameter passed to a function is if that parameter is an array. And then only the individual entries of the array can be changed - you cannot replace the array with another one (more detail later). 

Some examples:

```julia
julia> a = (1, 2, 3)
(1, 2, 3)

julia> typeof(a)
Tuple{Int64, Int64, Int64}

julia> b = (1., 2., 3, 1//2)
(1.0, 2.0, 3, 1//2)

julia> typeof(b)
Tuple{Float64, Float64, Int64, Rational{Int64}}

julia> a[2]
2

julia> c = (1,)
(1,)

julia> typeof(c)
Tuple{Int64}

julia> d = 1,2,3  # the parentheses are optional
(1, 2, 3)

julia> typeof(d)
Tuple{Int64, Int64, Int64}
```

We again use `[]` to access the individual entries.

```julia
julia> a = (1, 2, 3)
(1, 2, 3)

julia> a[2]
2
```

Tuples can be unpacked into variables:

```julia
julia> a
(1, 2, 3)

julia> x, y, z = a
(1, 2, 3)

julia> x
1

julia> y
2

julia> z
3
```

And since the parentheses are optional in the direct specification of tuples, we can do this:


```julia
julia> x = 1
1

julia> y = 2
2

julia> y, x = x, y
(1, 2)

julia> x
2

julia> y
1
```

Here we defined a tuple `(x, y)` and then unpacked it into the variables `y` and `x`, swopping their values.

Since tuples have superior performance to arrays, there exists a package that builds small arrays-like structures from tuples - [`StaticArrays.jl`](https://github.com/JuliaArrays/StaticArrays.jl). This is commonly used for maximum performance, but only for smallish arrays, typically less than 200-300 entries. More than that and you run out of space on the stack, which has a limited size.

#### Named Tuples
You can also name the entries in a tuple and access them via the names instead or indeces:

```julia
julia> nt = (a = 1, b = 2, c = "Bob")
(a = 1, b = 2, c = "Bob")

julia> typeof(nt)
NamedTuple{(:a, :b, :c), Tuple{Int64, Int64, String}}

julia> nt.a
1

julia> nt[2]
2

julia> nt.c
"Bob"

julia> nt.c === nt[3] # The values are "egal", i.e. not just equal, but the actual same bits in memory
true
```

Note that the entries in a tuple or named tuple needn't be all of the same type. This is also true for arrays, but in that case the array will be of type `Any` and performance will be hugely impacted. Avoid this whenever possible! 

#### Ranges
The third collection type we are considering are ranges. There are several ways to specify a range:

```julia
julia> a = 1:10   # start : stop with default step of one, hence a unit range
1:10

julia> typeof(a)
UnitRange{Int64}

julia> b = 1:2:20   # start : step : stop, hence a step range
1:2:19

julia> typeof(b)
StepRange{Int64, Int64}

julia> c = 1.0:0.5:5.0 # with floating point steps, we get a StepRangeLen
1.0:0.5:5.0

julia> typeof(c)
StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}

julia> d = range(2.0, step=5.3, length=5)  # instead of colon notation, you can call the function with more options
2.0:5.3:23.2

julia> typeof(d)
StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}
```

And just like before, we access the entries with `[]`:

```julia
julia> a[2]
2

julia> b[3]
5

julia> c[4]
2.5

julia> d[5]
23.2
```

The main difference is that, while arrays and tuples consist of values stored in memory, ranges are *lazy*. The values are only calculated when they are requested and no matter the length of the range, it takes up the same amount of memory - just enough to store the *start*, *step* and *stop*/*length* values that are needed to calculate any entry and know when you have run through the whole range.

You can change a range into an array, with the `collect()` function:

```julia
julia> collect(1:10)
10-element Vector{Int64}:
  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
```

#### Iterables
Arrays, tuples and ranges (and strings) are all iterable types, meaning you can iterate through their entries:

```julia
julia> a = [1, 5, 10]
3-element Vector{Int64}:
  1
  5
 10

julia> for i in a
           println(i)
       end
1
5
10

julia> for j in 1:3
           println(j*2)
       end
2
4
6

julia> t = (1, 2, 3)
(1, 2, 3)

julia> for k in t
           println(k)
       end
1
2
3
```
::: {.callout-note}
You can also use the Unicode symbol ∈ (`\in<tab>`) in place of the word `in`.
:::
From a programmer's point of view, iterable types all behave the same. We can therefore write a function that can handle any iterable type. The only requirement for this example is that the item passed should have at least two entries, or there will be an error.

```julia
julia> function mycomp(a)
           if a[1] > a[2]
               return true
           else
               return false
           end
       end
mycomp (generic function with 1 method)

julia> ar = [1, 2]
2-element Vector{Int64}:
 1
 2

julia> t = (2, 1)
(2, 1)

julia> r = 10:-1:1
10:-1:1

julia> mycomp(ar)
false

julia> mycomp(t)
true

julia> mycomp(r)
true
```
For each case, the Julia compiler will generate optimised code depending on the type of the variable passed.

#### Indexing
In the examples above, we used one dimensional arrays and there was really no choice in how to index into the structure. The entries are all in a row in memory.

In the case if multi-dimensional arrays, the entries are still sequential in memory - that is how RAM works! Here, however, there are better and worse options for accessing a given entry in the array.

This is because of how the values are stored in memory. It is faster to sequencially access values that are stored next to each other than to jump around in memory. Julia is *column major*, meaning that the values in the first column of a matrix are stored next to each other in memory, followed by the values of the second column etc. For higher dimenstions, the sequence is similar: each subsequent index follows the next. This is then the fastest way of iterating through the whole array.


```julia
julia> A = rand(10_000, 10_000);  # the _ is ignored - it is just to make reading easier. The ; at the end suppresses output of the result

julia> function myfunc(A)
           mysum = 0.0
           m, n = size(A)
           for i = 1:m, j = 1:n  # we are running through the matrix a row at a time
               mysum += A[i, j]
           end
           return mysum
       end
myfunc (generic function with 1 method)

julia> function myfunc2(A)
           mysum = 0.0
           m, n = size(A)
           for j = 1:n, i = 1:m  # we are running through the matrix a column at a time
               mysum += A[i, j]
           end
           return mysum
       end
myfunc2 (generic function with 1 method)

julia> using BenchmarkTools

julia> @btime myfunc(A)
  644.754 ms (1 allocation: 16 bytes)
4.99959369384022e7

julia> @btime myfunc2(A)
  94.296 ms (1 allocation: 16 bytes)
4.999593693838226e7
```
So, in our 10,000 x 10,000 random matrix, summing up the values row-wise takes 644.754ms, while column-wise it takes only 96.449ms. Quite the improvement! If you are worried you won't remember the correct way of iterating through a structure, Julia has you covered. Use `eachindex()` to get the optimal sequence:

```julia
julia> function myfunc3(A)
           mysum = 0.0
           m, n = size(A)
           for i in eachindex(A)
               mysum += A[i]
           end
           return mysum
       end
myfunc3 (generic function with 1 method)

julia> @btime myfunc3(A)
  96.394 ms (1 allocation: 16 bytes)
5.000090241950418e7
```

`eachindex()` returns a linear index, no matter what the dimensionality of the array is and sequences it for the fastest sequencial access.

Another useful indexing function is `enumerate`. It returns an iterator of tuples, each containing an index and value pair. The indeces are linear, not cartesian.

```julia
julia> A = rand(2,2)
2×2 Matrix{Float64}:
 0.488632  0.177813
 0.221677  0.559213

julia> for (index, value) in enumerate(A)
           println("$index $value")
       end
1 0.4886321057630626
2 0.22167740760406662
3 0.17781317540395236
4 0.5592126504604934
```
For more information, see the [manual](https://docs.julialang.org/en/v1/base/iterators/#Base.Iterators.enumerate).


::: {.callout-note}
Julia also provides the keywords `begin` and `end` to directly index the first and last entries in an array:

```julia
julia> a = [1, 2, 3]
3-element Vector{Int64}: …

julia> a[begin]
1

julia> a[end]
3

julia> a[end-1] # second last entry
2
```
:::

#### Array Assignments
The array variable is a pointer that holds the address of the memory space where the contents is kept (on the heap). This is not an implementation detail - it is an important thing to keep in mind, as there is a difference between modifying the entries of the array (the values in the memory the array variable points to) and changing the array variable (which memory it points to):

```julia
julia> a = collect(1:5)
5-element Vector{Int64}:
 1
 2
 3
 4
 5

julia> b = a
5-element Vector{Int64}:
 1
 2
 3
 4
 5

julia> b[2] = -1
-1

julia> a
5-element Vector{Int64}:
  1
 -1
  3
  4
  5

julia> a[2] = 10
10

julia> b
5-element Vector{Int64}:
  1
 10
  3
  4
  5
```

Here we created an array variable, `a`. Then we assigned `a` to `b`. The result is a new array variable that **points to the same memory space**. If we change the contents of `b`, we also change the contents of `a`, and vice versa.

If you want an independent copy of `a`, then use the `copy()` function:

```julia
julia> a = collect(1:5)
5-element Vector{Int64}:
 1
 2
 3
 4
 5

julia> b = copy(a)
5-element Vector{Int64}:
 1
 2
 3
 4
 5

julia> b[2] = -1
-1

julia> a
5-element Vector{Int64}:
 1
 2
 3
 4
 5

julia> b
5-element Vector{Int64}:
  1
 -1
  3
  4
  5
```
#### Array Comprehensions
This is a quick, flexible way of creating arrays with specific values, best illustrated by example:

```julia
julia> a = [sin(i^2) for i in 0:0.1:2π]
63-element Vector{Float64}:
  0.0
  0.009999833334166666
  0.03998933418663417
  0.08987854919801107
  0.159318206614246
  0.24740395925452294
  ⋮
  0.7940962483324946
 -0.24980688359658182
 -0.9917788534431158
 -0.4698420526176865
  0.6749435215575963

julia> [1/(x+y) for x in 1:3, y in 1:3]
3×3 Matrix{Float64}:
 0.5       0.333333  0.25
 0.333333  0.25      0.2
 0.25      0.2       0.166667

julia> [1/(x+y) for x in 1:3 for y in 1:3]
9-element Vector{Float64}:
 0.5
 0.3333333333333333       
 0.25
 0.3333333333333333
 0.25
 0.2
 0.25
 0.2
 0.16666666666666666 
```
Take note of the subtle difference between the second and third examples. This is not terribly intuitive! 

#### Broadcasting
You can process each entry in an iterable in a loop, or you can use the built-in broadcasting (a.k.a. dot notation). The following are equivalent:

```julia
julia> a = collect(1:5) # create an array
5-element Vector{Int64}:
 1
 2
 3
 4
 5

julia> b = 2:2:10 # create a range
2:2:10

julia> c = similar(a) # create an uninitialised array with the same size and type as a
5-element Vector{Int64}:
               0
 140734236573968
 140734236545296
               0
               0

julia> for i in 1:length(a)
           c[i] = a[i] + b[i]
       end

julia> c
5-element Vector{Int64}:
  3
  6
  9
 12
 15

julia> d = a .+ b # element-wise addition
5-element Vector{Int64}:
  3
  6
  9
 12
 15 

julia> e = sqrt.(d) # works for any function (note the . is between the name and the open parenthesis)
5-element Vector{Float64}:
 1.7320508075688772
 2.449489742783178
 3.0
 3.4641016151377544
 3.872983346207417

```

### The Type Hierarchy
The built-in types have a hieracrchy:

![The type hierarchy - Image from https://thautwarm.github.io/](https://thautwarm.github.io/Site-32/_images/julia-type-hierarchy.png)

This consists of abstract and concrete types. You can only instansiate a variable of a concrete type, but the abstracts types are useful to specificy groups of types that would behave similarly, e.g. `Float64` and `Int64` could both the added or multiplied. This is true for all the `Number` types, be they `Real` or `Complex`. We could specify allowed groups of types, via the `<:` operator, or specific types, via `::`, e.g.

```julia
function f(x::T) where T <: Number
    #do something
end
```

Here, Julia will allow us to call f(x) with any sub-type of the `Number` abstract type, such as `Float64`, `Int32` or `ComplexF64`. Calling f(x) with a `String` type will give an error, rather than try to compile a specialised version of `f()`.

### Structs
Structs are use-defined complex types that can contain multiple fields. They are defined using the `struct` keyword:

```julia
julia> struct PersonData
           name::String
           address::String
           ID::Int64
       end

julia> customers = PersonData[] # empty array of PersonData structs
PersonData[]

julia> typeof(customers)
Vector{PersonData} (alias for Array{PersonData, 1})

julia> bob = PersonData("Robert Smith", "2 Cypress Lane", 123456) # create a variable of type PersonData by calling the constructor
PersonData("Robert Smith", "2 Cypress Lane", 123456)

julia> push!(customers, bob) # push an entry into the array - will increase the length by one
1-element Vector{PersonData}:
 PersonData("Robert Smith", "2 Cypress Lane", 123456)

julia> customers[1]
PersonData("Robert Smith", "2 Cypress Lane", 123456)

julia> bob.name # access the values via the fieldnames
"Robert Smith"

julia> customers[1].name
"Robert Smith"
```

By default, a `struct` is immutable, meaning it cannot be changed once created:

```julia
julia> bob.name = "Joe Bloggs"
ERROR: setfield!: immutable struct of type PersonData cannot be changed
Stacktrace:
 [1] setproperty!(x::PersonData, f::Symbol, v::String)
   @ Base .\Base.jl:39
 [2] top-level scope
   @ REPL[31]:1
```

To make a `struct` mutable, simply add the keyword `mutable` to the definition.

```julia
julia> mutable struct PersonData2
           name::String
           address::String
           ID::Int64
       end

julia> bob = PersonData2("Robert Smith", "2 Cypress Lane", 123456)
PersonData2("Robert Smith", "2 Cypress Lane", 123456)

julia> bob.name
"Robert Smith"

julia> bob.name = "Joe Bloggs"
"Joe Bloggs"

julia> bob
PersonData2("Joe Bloggs", "2 Cypress Lane", 123456)
```

The `struct` is immutable by default to allow additional compiler optimisations. Mutable structs will therefore have worse performance, but more flexibility.

#### Constructors
Julia automatically creates a *contructor* for each struct you define. This is a function that takes the values of the fields, creates a new structure in memory and assigns the specified values to the fields.

You can also create additional constructors. There are two types:

- Outer constructors and
- Inner constructors

The default constructor is an outer constructor. You can also speficy additional outer constructors that, e.g. have default values for some fields, or calculate some values from others:

```julia
julia> struct PersonData
           name::String
           address::String
           ID::Int64
       end

julia> bob = PersonData("Robert Smith", "2 Cypress Lane", 123456)
PersonData("Robert Smith", "2 Cypress Lane", 123456)

julia> function PersonData(name, ID)
           # Call the default constructor to do the allocations and assignments
           PersonData(name, "No known address", ID) 
       end
PersonData

julia> sally = PersonData("Sally Jones", 123)
PersonData("Sally Jones", "No known address", 123)

julia> sally.address
"No known address"

julia> tom = PersonData("Tom Jones", "Las Vegas", 34556) # The default is still available
PersonData("Tom Jones", "Las Vegas", 34556
```

Inner constructors are defined as part of the `struct` definition and are used to validate the entries for the struct before creating the instance.

```julia
julia> struct OnlyNegatives
           val::Float64
           OnlyNegatives(val) = val > 0 ? error("Non-negative value!") : new(val)
       end

julia> OnlyNegatives(-1)
OnlyNegatives(-1.0)

julia> OnlyNegatives(1)
ERROR: Non-negative value!
Stacktrace:
 [1] error(s::String)
   @ Base .\error.jl:35
 [2] OnlyNegatives(val::Int64)
   @ Main .\REPL[7]:3
 [3] top-level scope
   @ REPL[9]:1
```

Inner constructors have access to a special local function, `new()`, which acts like the default outer constructor would.

::: {.callout-important}
If you define an inner constructor, NO default constructors are created. You need to handle all cases via your inner constructors.
:::


## Loops
Julia provides two types of loops:

1. `for` loops for iterating over an iterable contruct, like a range or array with a known length
2. `while` loops for iterating until a logical criterium is met, with an initially unknown number of iterations

```julia
julia> a = zeros(5)
5-element Vector{Float64}:
 0.0
 0.0
 0.0
 0.0
 0.0

julia> for i in 1:length(a)
           a[i] = 2*i^2
       end

julia> a
5-element Vector{Float64}:
  2.0
  8.0
 18.0
 32.0
 50.0

julia> while a[i] <= 10
           println(i, "\t", a[i])
           i += 1
       end
1       2.0
2       8.0
```
In a `while` loop, it is critical to manually implement a step (`i += 1` in the example), or the loop will execute indefintely!

## Logic and Flow Control
At some point in your code you will want to execute different instructions depending on some criteria. The most basic form of flow control is the `if` statement:

```julia
if a < 0
    println("Negative")
elseif a == 0
    println("Zero")
else
    println("Positive")
end
```

The `elseif` and `else` blocks are optional. You can have multiple `elseif` blocks with different criteria. You can also nest `if` statements. The `end` statement is a requirement.

Julia also offers a short-cut alternative for for simple `if` statements. The following two statements will both print the value `Negative` if `a < 0`.

```julia
a < 0 && println("Negative")
a >= 0 || println("Negative")
```
This looks a little arcane. It works as follows:

The `&&` operator is a logical `and`. For an `and` statement to be true, both criteria must be true, so if the first statement (before the `&&`) is false, Julia won't bother to evaluate the second statement (after the `&&`), since the whole cannot be true. This is called *short-circuit evaluation*. This means the `println()` is only executed if `a` is indeed less than zero.

The `||` operator is a logical `or`. For an `or` statement to be true, either of the two criteria must be true, so if the first statement is true, there is no need need to also evaluate the second - the whole is already true. The `println()` will therefore not be executed if `a` is larger than or equal to zero.

::: {.callout-tip}
To help you remember how *short-circuit evaluations* work, try this:

`a < 0 && println("Negative")` reads as  `a < 0` AND then `println()`

`a >= 0 || println("Negative")` reads as  `a >= 0` OR else `println()`
:::

You may very well choose to stick to more readily understandable `if` statements in your code, but these *short-circuit* notations are commonly used and you will encounter them often in other people's code

Finally, when you are only assigning values to a variable based on some criterium, there is the so-called *ternary operator*:

```julia
julia> a
-1

julia> b = a > 0 ? "Positive" : "Not positive"
"Not positive"
```

These can be nested as well:

```julia
julia> b = a > 0 ? "Positive" : (a == 0 ? "Zero" : "Negative")
"Negative"
```
The parentheses around the final statement are optional, but significantly improves readability.

## Functions










## Type Stability
 Being able to change the type of a variable can be useful, but it does also open the door to something that can cause slowdown in your code: **type instability**. This is when the type of x changes during the execution of your code, making many of the optimisations Julia could do impossible. Instead, additional code is required to handle the type changes. Keep a look-out for something like this:

```julia
julia> function myfunc(n)
           sum = 0
           for i in 1:n
               sum += 1.5
           end
           return sum
       end
myfunc (generic function with 1 method)
```

At first glance, there is nothing strange about this code. If you take a closer look however, you will see that `sum` is created as an integer via `sum = 0`, but then we assign floating point values to it.

Julia has a lot of code analyses tools. One of which is `@code_warntype`:

```julia
julia> @code_warntype myfunc(5)
MethodInstance for myfunc(::Int64)
  from myfunc(n) in Main at REPL[20]:1
Arguments
  #self#::Core.Const(myfunc)
  n::Int64
Locals
  @_3::Union{Nothing, Tuple{Int64, Int64}}
  sum::Union{Float64, Int64}
  i::Int64
Body::Union{Float64, Int64}
1 ─       (sum = 0)
│   %2  = (1:n)::Core.PartialStruct(UnitRange{Int64}, Any[Core.Const(1), Int64])
│         (@_3 = Base.iterate(%2))
│   %4  = (@_3 === nothing)::Bool
│   %5  = Base.not_int(%4)::Bool
└──       goto #4 if not %5
2 ┄ %7  = @_3::Tuple{Int64, Int64}
│         (i = Core.getfield(%7, 1))
│   %9  = Core.getfield(%7, 2)::Int64
│         (sum = sum + 1.5)
│         (@_3 = Base.iterate(%2, %9))
│   %12 = (@_3 === nothing)::Bool
│   %13 = Base.not_int(%12)::Bool
└──       goto #4 if not %13
3 ─       goto #2
4 ┄       return sum
```

Like when we looked at the LLVM code generated for a function, this may seem intimidating, but the important bit is this:

```julia
sum::Union{Float64, Int64}
```

::: {.callout-note}
In the REPL this is helpfully printed in red to draw your attention.
:::

Julia indicates that the variable `sum` is not type stable. It is assigned both `Int64` and `Float64`values.

